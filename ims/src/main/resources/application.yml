##############################################################################################
# Application configuration section
##############################################################################################
spring:
    application:
        name: ${apiml.service.id}

apiml:
  enabled: ${apiml.service.register}      # Decision if the service should automatically register with API ML discovery service
  enableUrlEncodedCharacters: true        # Decision if the service requests the API ML GW to receive encoded characters in the URL
  service:                                # The root of API ML onboarding configuration

      serviceId: ${apiml.service.id}      # The symbolic name of the service. Must be the same as `spring.application.name`
      title: ${service.title}
      description: ${service.description} # API service description

      scheme: https
      ### hostname:                                # Hostname must be defined by -Dapiml.service.hostname on MF
      ### port:                                    # Port must be defined by -Dapiml.service.port on MF:
      serviceIpAddress: ${apiml.service.ipAddress} # serviceIpAddress must be provided by -Dapiml.service.ipAddress on MF

      baseUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}
      contextPath: /${apiml.service.id}            # By default the contextPath is set to be the same as apiml.service.serviceId

      homePageRelativeUrl: ${apiml.service.contextPath}
      statusPageRelativeUrl: ${apiml.service.contextPath}/application/info
      healthCheckRelativeUrl: ${apiml.service.contextPath}/application/health

      ### discoveryServiceUrls: ${apiml.service.discoveryServiceUrls} # discoveryServiceUrls must be defined by -Dapiml.service.discoveryServiceUrls on MF:

      routes:
          -   gateway-url: "api/v1"
              service-url: ${apiml.service.contextPath}

      authentication:
          scheme: bypass

      apiInfo:
          -   apiId: ${apiml.service.id}
              version: 1.0.0
              gatewayUrl: api/v1
              swaggerUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/openapi.json
              documentationUrl: https://www.zowe.org

      catalog:
          tile:
              id: IMS                                    # Provide ID for your service Catalog tile
              title: IMS Operations API
              description: IMS Operations API
              version: 1.0.0

      ssl:
          enabled: ${server.ssl.enabled}
          verifySslCertificatesOfServices: true
          ciphers: TLS_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
          protocol: TLSv1.2
          enabled-protocols: ${server.ssl.protocol}
          keyStoreType: ${server.ssl.keyStoreType}
          trustStoreType: ${server.ssl.trustStoreType}

          ### DEFINE FOLLOWING PROPERTIES IN EXTERNAL CONFIGURATION
          keyAlias: ${server.ssl.keyAlias} #localhost-blah
          keyPassword: ${server.ssl.keyPassword} #password-blah
          keyStore: ${server.ssl.keyStore} #keystore/localhost/localhost.keystore.p12-blah
          keyStorePassword: ${server.ssl.keyStorePassword} #password-blah
          trustStore: ${server.ssl.trustStore} #keystore/localhost/localhost.truststore.p12-blah
          trustStorePassword: ${server.ssl.trustStorePassword} #password-blah

server:
    scheme: ${apiml.service.scheme}
    hostname: ${apiml.service.hostname} #localhost # Hostname that is advertised in Eureka. Default is valid only for localhost
    port: ${apiml.service.port} #10012         # Default port name for discoverable-client service
    address: ${apiml.service.ipAddress} #127.0.0.1

    servlet:
        contextPath: ${apiml.service.contextPath}

    ssl:
        enabled: true
        protocol: ${server.ssl.protocol}
        enabled-protocols: ${server.ssl.protocol}
        ciphers: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
        keyStoreType: ${server.ssl.keyStoreType}
        trustStoreType: ${server.ssl.trustStoreType}
